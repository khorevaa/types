Перем ПростыеТипы;
Перем СсылочныеТипы;
Перем ТипыМассивов;
Перем ТипыСтруктур;
Перем ТипыСоответствий;
Перем СпециальныеТипы;
Перем ВстроенныеТипы;
Перем _Тип;
Перем НаборТипов;

#Область Работа_с_простыми_типами

// Проверяет значение на соответствие простым типам:
// Простые типы:
//   Число
//   Строка
//   Булево
//   Дата
//   Тип
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоПростойТип(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ПростыеТипы);

КонецФункции

// Проверяет значение на тип <Число>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоЧисло(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	Возврат СравнениеТипов(ТипПеременной, ПростыеТипы.Число);

КонецФункции

// Проверяет значение на тип <Строка>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоСтрока(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ПростыеТипы.Строка);

КонецФункции

// Проверяет значение на тип <Булево>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоБулево(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ПростыеТипы.Булево);

КонецФункции

// Проверяет значение на тип <Дата>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоДата(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ПростыеТипы.Дата);

КонецФункции

// Проверяет значение на тип <Тип>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоТип(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, _Тип);

КонецФункции

#КонецОбласти

#Область Работа_с_типом_Массив

// Проверяет значение на типы <Массив>, <ФиксированныйМассив>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоЛюбойМассив(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ТипыМассивов);

КонецФункции

// Проверяет значение на тип <ФиксированныйМассив>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоФиксированныйМассив(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ТипыМассивов.ФиксированныйМассив);

КонецФункции

// Проверяет значение на тип <Массив>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоМассив(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ТипыМассивов.Массив);

КонецФункции

#КонецОбласти

#Область Работа_с_специальными_типами

// Проверяет значение на ссылочные типы
//	 <Массив>, <ФиксированныйМассив>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоСсылочныйТип(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, СсылочныеТипы);

КонецФункции

// Проверяет значение на тип <Неопределено>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоНеопределено(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, СпециальныеТипы.Неопределено);

КонецФункции

// Проверяет значение на тип <УникальныйИдентификатор>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоУникальныйИдентификатор(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, СпециальныеТипы.УникальныйИдентификатор);

КонецФункции

// Проверяет значение на тип <УникальныйИдентификатор>
// Синоним, метода <ЭтоУникальныйИдентификатор>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоUID(Знач ПеременнаяИлиТип) Экспорт

	Возврат ЭтоУникальныйИдентификатор(ПеременнаяИлиТип);

КонецФункции

#КонецОбласти

#Область Работа_с_типом_СписокЗначений

// Проверяет значение на тип <СписокЗначений>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоСписокЗначений(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, СсылочныеТипы.СписокЗначений);

КонецФункции

#КонецОбласти

#Область Работа_с_типом_ТаблицаЗначений

// Проверяет значение на тип <ТаблицаЗначений>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоТаблицаЗначений(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, СсылочныеТипы.ТаблицаЗначений);

КонецФункции

#КонецОбласти

#Область Работа_с_типом_ДеревоЗначений

// Проверяет значение на тип <ДеревоЗначений>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоДеревоЗначений(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, СсылочныеТипы.ДеревоЗначений);

КонецФункции

#КонецОбласти

#Область Работа_с_типом_Сценарий

// Проверяет значение на тип произвольного класса
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоСценарий(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат НЕ СравнениеТипов(ТипПеременной, НаборТипов);

КонецФункции

#КонецОбласти

#Область Работа_с_типом_Структура

// Проверяет значение на типы <Структура>, <ФиксированнаяСтруктура>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоЛюбаяСтруктура(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ТипыСтруктур);

КонецФункции

// Проверяет значение на тип <ФиксированнаяСтруктура>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоФиксированнаяСтруктура(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ТипыСтруктур.ФиксированнаяСтруктура);

КонецФункции

// Проверяет значение на тип <Структура>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоСтруктура(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ТипыСтруктур.Структура);

КонецФункции


#КонецОбласти

#Область Работа_с_типом_Соответствие

// Проверяет значение на типы <Соответствие>, <ФиксированноеСоответствие>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоЛюбоеСоответствие(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ТипыСоответствий);

КонецФункции

// Проверяет значение на тип <ФиксированноеСоответствие>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоФиксированноеСоответствие(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ТипыСоответствий.ФиксированноеСоответствие);

КонецФункции

// Проверяет значение на тип <Соответствие>
//
// Параметры:
//   ПеременнаяИлиТип - Произвольный - проверяемое значение
//
// Возвращаемое значение:
//   Булево - результат проверки: истина, если тип значения соответствует
//
Функция ЭтоСоответствие(Знач ПеременнаяИлиТип) Экспорт

	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);

	Возврат СравнениеТипов(ТипПеременной, ТипыСоответствий.Соответствие);

КонецФункции

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Функция ПолучитьТипПеременной(Знач Переменная)

	Если Переменная = _Тип Тогда
		Возврат Переменная;
	КонецЕсли;

	Возврат ТипЗнч(Переменная);

КонецФункции

Функция СравнениеТипаСНаборомТипов(ВходящийТип, НаборТиповСравнения)

	РезультатСравнения = Ложь;

	Для каждого ТипНабора Из НаборТиповСравнения Цикл

		РезультатСравнения = ПростоеСравнениеТипов(ВходящийТип, ТипНабора.Значение);

		Если РезультатСравнения Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат РезультатСравнения;

КонецФункции

Функция СравнениеТипов(ВходящийТип, ОжидаемыйТип)

	ТипПеременной = ПолучитьТипПеременной(ОжидаемыйТип);
	Если ТипПеременной = _Тип Тогда
		Возврат ПростоеСравнениеТипов(ВходящийТип, ОжидаемыйТип);
	ИначеЕсли ТипПеременной = Тип("Массив") Тогда
		Возврат СравнениеТипаСМассивомТипов(ВходящийТип, ОжидаемыйТип);
	ИначеЕсли ТипПеременной = Тип("Структура") Тогда
		Возврат СравнениеТипаСНаборомТипов(ВходящийТип, ОжидаемыйТип);
	КонецЕсли;

	Возврат ПростоеСравнениеТипов(ВходящийТип, ОжидаемыйТип);

КонецФункции

Функция СравнениеТипаСМассивомТипов(ВходящийТип, МассивТипов)

	НайденныйЭлемент = 	МассивТипов.Найти(ВходящийТип);
	Возврат Не НайденныйЭлемент = Неопределено;

КонецФункции

Функция ПростоеСравнениеТипов(ВходящийТип, ОжидаемыйТип)
	Возврат ВходящийТип = ОжидаемыйТип;
КонецФункции

Процедура СформироватьНаборТипов()

	НаборТипов = Новый Структура();
	ДополнитьСтруктуру(НаборТипов, ПростыеТипы);
	ДополнитьСтруктуру(НаборТипов, СсылочныеТипы);
	ДополнитьСтруктуру(НаборТипов, СпециальныеТипы);
	ДополнитьСтруктуру(НаборТипов, ВстроенныеТипы);

КонецПроцедуры

Процедура ДополнитьСтруктуру(Приемник, Источник)

	Для каждого ЭлементИсточника Из Источник Цикл

		Приемник.Вставить(ЭлементИсточника.Ключ, ЭлементИсточника.Значение);

	КонецЦикла;

КонецПроцедуры

Процедура Инициализация()

	_Тип = Тип("Тип");

	ПростыеТипы = Новый Структура();
	ПростыеТипы.Вставить("Число", Тип("Число"));
	ПростыеТипы.Вставить("Строка", Тип("Строка"));
	ПростыеТипы.Вставить("Булево", Тип("Булево"));
	ПростыеТипы.Вставить("Дата", Тип("Дата"));

	СсылочныеТипы = Новый Структура();
	СсылочныеТипы.Вставить("ТаблицаЗначений", Тип("ТаблицаЗначений"));
	СсылочныеТипы.Вставить("ДеревоЗначений", Тип("ДеревоЗначений"));
	СсылочныеТипы.Вставить("СписокЗначений", Тип("СписокЗначений"));

	СпециальныеТипы = Новый Структура();
	СпециальныеТипы.Вставить("УникальныйИдентификатор", Тип("УникальныйИдентификатор"));
	СпециальныеТипы.Вставить("Неопределено", Тип("Неопределено"));
	СпециальныеТипы.Вставить("ОписаниеТипов", Тип("ОписаниеТипов"));

	ТипыМассивов = Новый Структура();
	ТипыМассивов.Вставить("Массив", Тип("Массив"));
	ТипыМассивов.Вставить("ФиксированныйМассив", Тип("ФиксированныйМассив"));

	ДополнитьСтруктуру(СсылочныеТипы, ТипыМассивов);

	ТипыСтруктур = Новый Структура();
	ТипыСтруктур.Вставить("Структура", Тип("Структура"));
	ТипыСтруктур.Вставить("ФиксированнаяСтруктура", Тип("ФиксированнаяСтруктура"));

	ДополнитьСтруктуру(СсылочныеТипы, ТипыСтруктур);

	ТипыСоответствий = Новый Структура();
	ТипыСоответствий.Вставить("Соответствие", Тип("Соответствие"));
	ТипыСоответствий.Вставить("ФиксированноеСоответствие", Тип("ФиксированноеСоответствие"));
	ДополнитьСтруктуру(СсылочныеТипы, ТипыСоответствий);

	ВстроенныеТипы = Новый Структура();
	// Список значений
	ВстроенныеТипы.Вставить("ЭлементСпискаЗначений", Тип("ЭлементСпискаЗначений"));

	// Таблица значений
	ВстроенныеТипы.Вставить("КолонкаТаблицыЗначений", Тип("КолонкаТаблицыЗначений"));
	ВстроенныеТипы.Вставить("КоллекцияКолонокТаблицыЗначений", Тип("КоллекцияКолонокТаблицыЗначений"));
	ВстроенныеТипы.Вставить("СтрокаТаблицыЗначений", Тип("СтрокаТаблицыЗначений"));
	ВстроенныеТипы.Вставить("ИндексыКоллекции", Тип("ИндексыКоллекции"));
	ВстроенныеТипы.Вставить("ИндексКоллекции", Тип("ИндексКоллекции"));

	// Дерево значений
	ВстроенныеТипы.Вставить("СтрокаДереваЗначений", Тип("СтрокаДереваЗначений"));
	ВстроенныеТипы.Вставить("КолонкаДереваЗначений", Тип("КолонкаДереваЗначений"));
	ВстроенныеТипы.Вставить("КоллекцияКолонокДереваЗначений", Тип("КоллекцияКолонокДереваЗначений"));
	ВстроенныеТипы.Вставить("КоллекцияСтрокДереваЗначений", Тип("КоллекцияСтрокДереваЗначений"));

	// Элемент Любой структуры и соответсвия
	ВстроенныеТипы.Вставить("КлючИЗначение", Тип("КлючИЗначение"));

	// Работа с интернетом
	ВстроенныеТипы.Вставить("HTTPСоединение", Тип("HTTPСоединение"));
	ВстроенныеТипы.Вставить("HTTPОтвет", Тип("HTTPОтвет"));
	ВстроенныеТипы.Вставить("HTTPЗапрос", Тип("HTTPЗапрос"));
	ВстроенныеТипы.Вставить("ИнтернетПрокси", Тип("ИнтернетПрокси"));
	ВстроенныеТипы.Вставить("TCPСоединение", Тип("TCPСоединение"));
	ВстроенныеТипы.Вставить("TCPСервер", Тип("TCPСервер"));

	// Работа с ZIP
	ВстроенныеТипы.Вставить("ЗаписьZipФайла", Тип("ЗаписьZipФайла"));
	ВстроенныеТипы.Вставить("ЧтениеZipФайла", Тип("ЧтениеZipФайла"));
	ВстроенныеТипы.Вставить("ЭлементыZipФайла", Тип("ЭлементыZipФайла"));
	ВстроенныеТипы.Вставить("ЭлементZipФайла", Тип("ЭлементZipФайла"));

	// Работа с двоичными данными
	ВстроенныеТипы.Вставить("БуферДвоичныхДанных", Тип("БуферДвоичныхДанных"));
	ВстроенныеТипы.Вставить("ФайловыйПоток", Тип("ФайловыйПоток"));
	ВстроенныеТипы.Вставить("ПотокВПамяти", Тип("ПотокВПамяти"));
	ВстроенныеТипы.Вставить("Поток", Тип("Поток"));
	ВстроенныеТипы.Вставить("МенеджерФайловыхПотоков", Тип("МенеджерФайловыхПотоков"));
	ВстроенныеТипы.Вставить("ДвоичныеДанные", Тип("ДвоичныеДанные"));

	// Регулярные выражения
	ВстроенныеТипы.Вставить("РегулярноеВыражение", Тип("РегулярноеВыражение"));
	ВстроенныеТипы.Вставить("ГруппаРегулярногоВыражения", Тип("ГруппаРегулярногоВыражения"));
	ВстроенныеТипы.Вставить("КоллекцияГруппРегулярногоВыражения", Тип("КоллекцияГруппРегулярногоВыражения"));
	ВстроенныеТипы.Вставить("КоллекцияСовпаденийРегулярногоВыражения", Тип("КоллекцияСовпаденийРегулярногоВыражения"));
	ВстроенныеТипы.Вставить("СовпадениеРегулярногоВыражения", Тип("СовпадениеРегулярногоВыражения"));

	// Работа с форматами сериализации
	ВстроенныеТипы.Вставить("ЧтениеXML", Тип("ЧтениеXML"));
	ВстроенныеТипы.Вставить("ЗаписьXML", Тип("ЗаписьXML"));
	ВстроенныеТипы.Вставить("КонтекстПространствИменXML", Тип("КонтекстПространствИменXML"));
	ВстроенныеТипы.Вставить("ПараметрыЗаписиXML", Тип("ПараметрыЗаписиXML"));
	ВстроенныеТипы.Вставить("ЧтениеJSON", Тип("ЧтениеJSON"));
	ВстроенныеТипы.Вставить("ЗаписьJSON", Тип("ЗаписьJSON"));
	ВстроенныеТипы.Вставить("ПараметрыЗаписиJSON", Тип("ПараметрыЗаписиJSON"));

	// Прочие типы
	ВстроенныеТипы.Вставить("COMОбъект", Тип("COMОбъект"));
	ВстроенныеТипы.Вставить("ИнформацияОбОшибке", Тип("ИнформацияОбОшибке"));
	ВстроенныеТипы.Вставить("ИнформацияОбОшибкеШаблон", Тип("ИнформацияОбОшибкеШаблон"));
	ВстроенныеТипы.Вставить("SafeArrayWrapper", Тип("SafeArrayWrapper"));
	ВстроенныеТипы.Вставить("ИнформацияОСценарии", Тип("ИнформацияОСценарии"));
	ВстроенныеТипы.Вставить("КоллекцияКадровСтекаВызовов", Тип("КоллекцияКадровСтекаВызовов"));
	ВстроенныеТипы.Вставить("КадрСтекаВызовов", Тип("КадрСтекаВызовов"));
    ВстроенныеТипы.Вставить("Консоль", Тип("Консоль"));
	ВстроенныеТипы.Вставить("Файл", Тип("Файл"));
	ВстроенныеТипы.Вставить("Процесс", Тип("Процесс"));
	ВстроенныеТипы.Вставить("Рефлектор", Тип("Рефлектор"));
	ВстроенныеТипы.Вставить("ГенераторСлучайныхЧисел", Тип("ГенераторСлучайныхЧисел"));
	ВстроенныеТипы.Вставить("ПотокВыводаТекста", Тип("ПотокВыводаТекста"));
    ВстроенныеТипы.Вставить("ПотокВводаТекста", Тип("ПотокВводаТекста"));
    ВстроенныеТипы.Вставить("Символы", Тип("Символы"));
    ВстроенныеТипы.Вставить("СистемнаяИнформация", Тип("СистемнаяИнформация"));
    ВстроенныеТипы.Вставить("ТекстовыйДокумент", Тип("ТекстовыйДокумент"));
    ВстроенныеТипы.Вставить("ЧтениеТекста", Тип("ЧтениеТекста"));
    ВстроенныеТипы.Вставить("ЗаписьТекста", Тип("ЗаписьТекста"));
    ВстроенныеТипы.Вставить("ОписаниеТипов", Тип("ОписаниеТипов"));
    ВстроенныеТипы.Вставить("ХешированиеДанных", Тип("ХешированиеДанных"));
    ВстроенныеТипы.Вставить("ИнформацияОДиске", Тип("ИнформацияОДиске"));
    ВстроенныеТипы.Вставить("ЧтениеДанных", Тип("ЧтениеДанных"));
    ВстроенныеТипы.Вставить("ЗаписьДанных", Тип("ЗаписьДанных"));
    ВстроенныеТипы.Вставить("РезультатЧтенияДанных", Тип("РезультатЧтенияДанных"));
	ВстроенныеТипы.Вставить("КвалификаторыЧисла", Тип("КвалификаторыЧисла"));
	ВстроенныеТипы.Вставить("КвалификаторыСтроки", Тип("КвалификаторыСтроки"));
	ВстроенныеТипы.Вставить("КвалификаторыДаты", Тип("КвалификаторыДаты"));
	ВстроенныеТипы.Вставить("КвалификаторыДвоичныхДанных", Тип("КвалификаторыДвоичныхДанных"));

	СформироватьНаборТипов();

КонецПроцедуры

#КонецОбласти

Инициализация();

