#Использовать reflector

#Область Программный_интерфейс

// Выполняет копирование любого типа
//
// Параметры:
//   Источник - Произвольный - объект для копирования
//   Приемник - Произвольный - переменная приемник для копирования
//   РежимКопирования - Число - режим настройки копирования (по умолчанию 1)
//								0 - не копирует вложенные ссылочные типы значений
//								1 - копирует все вложенные ссылочные типы значений, кроме типа <Сценарий>
//								2 - копирует все вложенные ссылочные типы значений, включая тип <Сценарий>
//
// Возвращаемое значение:
//   Произвольный - скопированное значение
//
Функция Скопировать(Знач Источник, Приемник = Неопределено, Знач РежимКопирования = 1) Экспорт

	Приемник = СкопироватьЗначение(Источник, Приемник, РежимКопирования);
	Возврат Приемник;

КонецФункции

Функция СкопироватьМассив(Знач Источник, Приемник = Неопределено, Знач РежимКопирования = 1) Экспорт

	Если Не ПроверкаТипа.ЭтоЛюбойМассив(Источник) Тогда
		ВызватьИсключение "Ошибка копирование массива";
	КонецЕсли;

	Если ПроверкаТипа.ЭтоФиксированныйМассив(Приемник) Тогда
		ВнутреннийПриемник = СкопироватьЗначение(Приемник, Новый Массив(), РежимКопирования);
	ИначеЕсли ПроверкаТипа.ЭтоМассив(Приемник) Тогда
		ВнутреннийПриемник = Приемник;
	Иначе
		ВнутреннийПриемник = Новый Массив();
	КонецЕсли;

	Для каждого ЭлементМассива Из Источник Цикл

		Если РежимКопирования > 0 Тогда
			ВнутреннийПриемник.Добавить(СкопироватьЗначение(ЭлементМассива, , РежимКопирования));
		Иначе
			ВнутреннийПриемник.Добавить(ЭлементМассива);
		КонецЕсли;

	КонецЦикла;

	Если Приемник = Неопределено Тогда

		Если ПроверкаТипа.ЭтоФиксированныйМассив(Источник) Тогда
			ВнутреннийПриемник = Новый ФиксированныйМассив(ВнутреннийПриемник);
		КонецЕсли;

	Иначе

		Если ПроверкаТипа.ЭтоФиксированныйМассив(Приемник) Тогда
			ВнутреннийПриемник = Новый ФиксированныйМассив(ВнутреннийПриемник);
		КонецЕсли;

	КонецЕсли;

	Приемник = ВнутреннийПриемник;

	Возврат ВнутреннийПриемник;

КонецФункции

Функция СкопироватьСписокЗначений(Знач Источник, Приемник = Неопределено, Знач РежимКопирования = 1) Экспорт

	Если Не ПроверкаТипа.ЭтоСписокЗначений(Источник) Тогда
		ВызватьИсключение "Ошибка копирование списка значений";
	КонецЕсли;

	Если РежимКопирования = 0 Тогда
		Приемник = Источник.Скопировать();
	Иначе

		Если Не ПроверкаТипа.ЭтоСписокЗначений(Приемник) Тогда
			Приемник = Новый СписокЗначений();
		КонецЕсли;

		Для каждого ЭлементИсточника Из Источник Цикл

			Приемник.Добавить(СкопироватьЗначение(ЭлементИсточника.Значение, , РежимКопирования),
							ЭлементИсточника.Представление,
							ЭлементИсточника.Пометка,
							ЭлементИсточника.Картинка);

		КонецЦикла;

	КонецЕсли;

	Возврат Приемник;

КонецФункции

Функция СкопироватьСтруктуру(Знач Источник, Приемник = Неопределено, Знач РежимКопирования = 1) Экспорт

	Если Не ПроверкаТипа.ЭтоЛюбаяСтруктура(Источник) Тогда
		ВызватьИсключение "Ошибка копирование структуры";
	КонецЕсли;

	Если ПроверкаТипа.ЭтоФиксированнаяСтруктура(Приемник) Тогда
		ВнутреннийПриемник = Новый Структура(Приемник);
	ИначеЕсли ПроверкаТипа.ЭтоСтруктура(Приемник) Тогда
		ВнутреннийПриемник = Приемник;
	Иначе
		ВнутреннийПриемник = Новый Структура();
	КонецЕсли;

	Для каждого ЭлементИсточника Из Источник Цикл

		Если РежимКопирования > 0 Тогда
			ВнутреннийПриемник.Вставить(ЭлементИсточника.Ключ, СкопироватьЗначение(ЭлементИсточника.Значение, , РежимКопирования));
		Иначе
			ВнутреннийПриемник.Вставить(ЭлементИсточника.Ключ, ЭлементИсточника.Значение);
		КонецЕсли;

	КонецЦикла;

	Если Приемник = Неопределено Тогда

		Если ПроверкаТипа.ЭтоФиксированнаяСтруктура(Источник) Тогда
			ВнутреннийПриемник = Новый ФиксированнаяСтруктура(ВнутреннийПриемник);
		КонецЕсли;

	Иначе

		Если ПроверкаТипа.ЭтоФиксированнаяСтруктура(Приемник) Тогда
			ВнутреннийПриемник = Новый ФиксированнаяСтруктура(ВнутреннийПриемник);
		КонецЕсли;

	КонецЕсли;

	Приемник = ВнутреннийПриемник;

	Возврат ВнутреннийПриемник;

КонецФункции

Функция СкопироватьСоответствие(Знач Источник, Приемник = Неопределено, Знач РежимКопирования = 1) Экспорт

	Если Не ПроверкаТипа.ЭтоЛюбоеСоответствие(Источник) Тогда
		ВызватьИсключение "Ошибка копирование соответствия";
	КонецЕсли;

	Если ПроверкаТипа.ЭтоФиксированноеСоответствие(Приемник) Тогда
		ВнутреннийПриемник = СкопироватьЗначение(Приемник, Новый Соответствие(), РежимКопирования);
	ИначеЕсли ПроверкаТипа.ЭтоСоответствие(Приемник) Тогда
		ВнутреннийПриемник = Приемник;
	Иначе
		ВнутреннийПриемник = Новый Соответствие();
	КонецЕсли;

	Для каждого ЭлементИсточника Из Источник Цикл

		Если РежимКопирования > 0 Тогда
			ВнутреннийПриемник.Вставить(ЭлементИсточника.Ключ, СкопироватьЗначение(ЭлементИсточника.Значение, ,РежимКопирования));
		Иначе
			ВнутреннийПриемник.Вставить(ЭлементИсточника.Ключ, ЭлементИсточника.Значение);
		КонецЕсли;

	КонецЦикла;

	Если Приемник = Неопределено Тогда

		Если ПроверкаТипа.ЭтоФиксированноеСоответствие(Источник) Тогда
			ВнутреннийПриемник = Новый ФиксированноеСоответствие(ВнутреннийПриемник);
		КонецЕсли;

	Иначе

		Если ПроверкаТипа.ЭтоФиксированноеСоответствие(Приемник) Тогда
			ВнутреннийПриемник = Новый ФиксированноеСоответствие(ВнутреннийПриемник);
		КонецЕсли;

	КонецЕсли;

	Приемник = ВнутреннийПриемник;

	Возврат ВнутреннийПриемник;

КонецФункции

Функция СкопироватьТаблицуЗначений(Знач Источник, Приемник = Неопределено, Знач РежимКопирования = 1) Экспорт

	Если Не ПроверкаТипа.ЭтоТаблицаЗначений(Источник) Тогда
		ВызватьИсключение "Ошибка копирование ТаблицыЗначений";
	КонецЕсли;

	Приемник = Источник.Скопировать();

	Если РежимКопирования > 0 Тогда

		КоличествоКолонок = Приемник.Колонки.Количество() - 1;

		Для каждого СтрокаПриемника Из Приемник Цикл

			Для ИндексКолонки = 0 По КоличествоКолонок Цикл

				СтрокаПриемника[ИндексКолонки] = СкопироватьЗначение(СтрокаПриемника[ИндексКолонки], ,РежимКопирования);

			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	Возврат Приемник;

КонецФункции

Функция СкопироватьДеревоЗначений(Знач Источник, Приемник = Неопределено, Знач РежимКопирования = 1) Экспорт

	Если Не ПроверкаТипа.ЭтоДеревоЗначений(Источник) Тогда
		ВызватьИсключение "Ошибка копирование массива";
	КонецЕсли;

	Приемник = Источник.Скопировать();

	Если РежимКопирования > 0 Тогда

		КоличествоКолонок = Приемник.Колонки.Количество() - 1;

		СкопироватьСтрокиДереваЗначений(Приемник.Строки, КоличествоКолонок, РежимКопирования);

	КонецЕсли;

	Возврат Приемник;

КонецФункции

Функция СкопироватьСценарий(Знач Источник, Приемник = Неопределено, Знач РежимКопирования = 1) Экспорт

	Если Не ПроверкаТипа.ЭтоСценарий(Источник) Тогда
		ВызватьИсключение "Ошибка копирование сценария";
	КонецЕсли;

	Если РежимКопирования < 2 Тогда
		Приемник = Источник;
		Возврат Приемник;
	КонецЕсли;

	ТипыРавны = ПроверкаТипа.ТипыРавны(Источник, Приемник);

	РасширенныйРефлектор = Новый РефлекторОбъекта(Источник);

	ЕстьФункцияСкопировать = РасширенныйРефлектор.ЕстьФункция("Скопировать", 1);
	ЕстьПроцедураСкопироватьВ = РасширенныйРефлектор.ЕстьПроцедура("СкопироватьВ", 2);

	
	Если ЕстьПроцедураСкопироватьВ
		И ТипыРавны Тогда
		Источник.СкопироватьВ(Приемник, РежимКопирования);
	
	ИначеЕсли ЕстьФункцияСкопировать Тогда
		Приемник = Источник.Скопировать(РежимКопирования);
	Иначе
		Приемник = Источник;
	КонецЕсли;

	Возврат Приемник;

КонецФункции

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Функция СкопироватьЗначение(Знач ЗначениеИсточник, ЗначениеПриемник = Неопределено, Знач РежимКопирования)

	Если ПроверкаТипа.ЭтоПростойТип(ЗначениеИсточник) Тогда
		Возврат ЗначениеИсточник;
	ИначеЕсли ПроверкаТипа.ЭтоНеопределено(ЗначениеИсточник) Тогда
		Возврат Неопределено;
	ИначеЕсли ПроверкаТипа.ЭтоТип(ЗначениеИсточник) Тогда
		Возврат ЗначениеИсточник;
	ИначеЕсли ПроверкаТипа.ЭтоУникальныйИдентификатор(ЗначениеИсточник) Тогда
		Возврат Новый УникальныйИдентификатор(Строка(ЗначениеИсточник));
	ИначеЕсли ПроверкаТипа.ЭтоСсылочныйТип(ЗначениеИсточник) Тогда
		Возврат СкопироватьСсылочныйТип(ЗначениеИсточник, ЗначениеПриемник, РежимКопирования);
	ИначеЕсли ПроверкаТипа.ЭтоСценарий(ЗначениеИсточник) Тогда
		Возврат СкопироватьСценарий(ЗначениеИсточник, ЗначениеПриемник, РежимКопирования);
	Иначе
		Возврат ЗначениеИсточник;
	КонецЕсли;

КонецФункции

Функция СкопироватьСсылочныйТип(Знач ЗначениеИсточник, ЗначениеПриемник = Неопределено, Знач РежимКопирования)

	Если ПроверкаТипа.ЭтоЛюбаяСтруктура(ЗначениеИсточник) Тогда
		Возврат СкопироватьСтруктуру(ЗначениеИсточник, ЗначениеПриемник, РежимКопирования);
	ИначеЕсли ПроверкаТипа.ЭтоЛюбоеСоответствие(ЗначениеИсточник) Тогда
		Возврат СкопироватьСоответствие(ЗначениеИсточник, ЗначениеПриемник, РежимКопирования)
	ИначеЕсли ПроверкаТипа.ЭтоТаблицаЗначений(ЗначениеИсточник) Тогда
		Возврат СкопироватьТаблицуЗначений(ЗначениеИсточник, ЗначениеПриемник, РежимКопирования);
	ИначеЕсли ПроверкаТипа.ЭтоДеревоЗначений(ЗначениеИсточник) Тогда
		Возврат СкопироватьДеревоЗначений(ЗначениеИсточник, ЗначениеПриемник, РежимКопирования);
	ИначеЕсли ПроверкаТипа.ЭтоСписокЗначений(ЗначениеИсточник) Тогда
		Возврат СкопироватьСписокЗначений(ЗначениеИсточник, ЗначениеПриемник, РежимКопирования);
	ИначеЕсли ПроверкаТипа.ЭтоЛюбойМассив(ЗначениеИсточник) Тогда
		Возврат СкопироватьМассив(ЗначениеИсточник, ЗначениеПриемник, РежимКопирования);
	Иначе
		Возврат ЗначениеИсточник;
	КонецЕсли;

КонецФункции

Процедура СкопироватьСтрокиДереваЗначений(СтрокиДереваЗначений, Знач КоличествоКолонок, Знач РежимКопирования)

	Для каждого СтрокаДереваЗначений Из СтрокиДереваЗначений Цикл
		
		Для ИндексКолонки = 0 По КоличествоКолонок Цикл
			СтрокаДереваЗначений[ИндексКолонки] = СкопироватьЗначение(СтрокаДереваЗначений[ИндексКолонки], ,РежимКопирования);
		КонецЦикла;
	
		Если СтрокаДереваЗначений.Строки.Количество() > 0 Тогда
			СкопироватьСтрокиДереваЗначений(СтрокаДереваЗначений.Строки, КоличествоКолонок, РежимКопирования);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

